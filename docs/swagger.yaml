definitions:
  common.MetaData:
    properties:
      links:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      page:
        type: integer
      page_count:
        type: integer
      per_page:
        type: integer
      total_count:
        type: integer
    type: object
  common.ResponseDTO:
    properties:
      _metadata:
        $ref: '#/definitions/common.MetaData'
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: api-service  API
  title: api-service API
paths:
  /api/v1/agents:
    post:
      consumes:
      - application/json
      description: Save Agents terminal information
      parameters:
      - description: Agents Terminal Data
        in: body
        name: data
        required: true
        schema:
          type: object
      - description: agent name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Save Agents terminal information
      tags:
      - Agent
  /api/v1/agents/{name}:
    get:
      description: Get Agents terminal info by agent name
      parameters:
      - description: agent name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Agents terminal info by agent name
      tags:
      - Agent
  /api/v1/applications:
    get:
      description: Get all applications
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      - description: Loads Repositories
        in: query
        name: loadRepositories
        type: boolean
      - description: Loads Applications
        in: query
        name: loadApplications
        type: boolean
      - description: Loads Token
        in: query
        name: loadToken
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get all applications
      tags:
      - Application
    post:
      consumes:
      - application/json
      description: Update Application by company id and  repository id
      parameters:
      - description: ApplicationWithUpdateOption Data
        in: body
        name: data
        required: true
        schema:
          type: object
      - description: repository Id
        in: query
        name: repositoryId
        required: true
        type: string
      - description: Company Update Option
        in: query
        name: companyUpdateOption
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update Application
      tags:
      - Application
  /api/v1/applications/{id}:
    get:
      description: Get application by appliction id
      parameters:
      - description: application id
        in: path
        name: id
        required: true
        type: string
      - description: repository id
        in: query
        name: repositoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get application by appliction id
      tags:
      - Application
  /api/v1/applications/{id}/pipeline:
    post:
      description: Create application pipeline
      parameters:
      - description: pipeline
        in: body
        name: pipeline
        required: true
        schema:
          type: object
      - description: repository id
        in: query
        name: repositoryId
        type: string
      - description: application id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Create application pipeline
      tags:
      - Application
    put:
      description: Update application pipeline
      parameters:
      - description: pipeline
        in: body
        name: pipeline
        required: true
        schema:
          type: object
      - description: repository id
        in: query
        name: repositoryId
        type: string
      - description: application id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update application pipeline
      tags:
      - Application
  /api/v1/bitbuckets/branches:
    get:
      description: Gets Branches
      parameters:
      - description: Repository Id
        in: query
        name: repoId
        required: true
        type: string
      - description: Url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Branches
      tags:
      - Bitbucket
  /api/v1/bitbuckets/commits:
    get:
      description: Gets Commit By Branch
      parameters:
      - description: Repository Id
        in: query
        name: repoId
        required: true
        type: string
      - description: Url
        in: query
        name: url
        required: true
        type: string
      - description: Branch
        in: query
        name: branch
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Commit By Branch
      tags:
      - Bitbucket
  /api/v1/companies:
    get:
      description: Gets companies
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      - description: Loads Repositories
        in: query
        name: loadRepositories
        type: boolean
      - description: Loads Applications
        in: query
        name: loadApplications
        type: boolean
      - description: Loads Token
        in: query
        name: loadToken
        type: boolean
      - description: status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get companies
      tags:
      - Company
    post:
      description: Saves company
      parameters:
      - description: Company data
        in: body
        name: data
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Save company
      tags:
      - Company
  /api/v1/companies/{id}:
    get:
      description: Gets company by id
      parameters:
      - description: Company id
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      - description: Loads Repositories
        in: query
        name: loadRepositories
        type: boolean
      - description: Loads Applications
        in: query
        name: loadApplications
        type: boolean
      - description: action [dashboard_data]
        in: query
        name: action
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get company by id
      tags:
      - Company
  /api/v1/companies/{id}/applications:
    get:
      description: Gets RApplications by company id and repository type
      parameters:
      - description: Company id
        in: path
        name: id
        required: true
        type: string
      - description: Repository Type
        in: path
        name: repository_type
        required: true
        type: string
      - description: status
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      - description: Loads Repositories
        in: query
        name: loadRepositories
        type: boolean
      - description: Loads Applications
        in: query
        name: loadApplications
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Applications by company id and repository type
      tags:
      - Company
  /api/v1/companies/{id}/repositories:
    get:
      description: Gets RepositoriesDto by company id
      parameters:
      - description: Company id
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      - description: Loads Repositories
        in: query
        name: loadRepositories
        type: boolean
      - description: Loads Applications
        in: query
        name: loadApplications
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get RepositoriesDto by company id
      tags:
      - Company
    put:
      description: updates repositories
      parameters:
      - description: List Of Repositories data
        in: body
        name: data
        required: true
        schema:
          type: object
      - description: Company id
        in: path
        name: id
        required: true
        type: string
      - description: Company Update Option
        in: query
        name: companyUpdateOption
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update repositories by company id
      tags:
      - Company
  /api/v1/companies/{id}/repositories/{repoId}/webhooks:
    patch:
      description: Update Webhook
      parameters:
      - description: action type [enable/disable]
        in: query
        name: action
        required: true
        type: string
      - description: Repository type [github/bitbucket]
        in: query
        name: repoType
        required: true
        type: string
      - description: Company id
        in: path
        name: id
        required: true
        type: string
      - description: Repository id
        in: path
        name: repoId
        required: true
        type: string
      - description: Url
        in: query
        name: url
        required: true
        type: string
      - description: Webhook Id to disable webhook
        in: query
        name: webhookId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update Webhook to Enable or Disable
      tags:
      - Github
  /api/v1/githubs/branches:
    get:
      description: Gets Branches
      parameters:
      - description: Repository Id
        in: query
        name: repoId
        required: true
        type: string
      - description: Url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Branches
      tags:
      - Github
  /api/v1/githubs/commits:
    get:
      description: Gets commit by branch
      parameters:
      - description: Url
        in: query
        name: url
        required: true
        type: string
      - description: branch
        in: query
        name: branch
        required: true
        type: string
      - description: Repository Id
        in: query
        name: repoId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get commit by branch
      tags:
      - Github
  /api/v1/kube_events:
    post:
      consumes:
      - application/json
      description: Stores k8s event
      parameters:
      - description: KubeEvent Data
        in: body
        name: data
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Save k8s event
      tags:
      - KubeEvent
  /api/v1/kube_objects:
    get:
      description: Api for getting all kube objects by object name, agent name, owner
        reference and process id
      parameters:
      - description: Owner Reference
        in: query
        name: owner-reference
        type: string
      - description: action [dashboard_data]
        in: query
        name: action
        required: true
        type: string
      - description: object [certificate/cluster-role/cluster-role-binding/config-map/daemon-set/deployment/ingress/namespace/network-policy/node/pod/persistent-volume/persistent-volume-claim/replica-set/role/role-binding/secret/service/service-account/stateful-set]
        in: query
        name: object
        required: true
        type: string
      - description: Process Id
        in: query
        name: processId
        required: true
        type: string
      - description: Agent Name
        in: query
        name: agent
        required: true
        type: string
      - description: Page Number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Sort By Created Time
        in: query
        name: sort
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get api
      tags:
      - KubeObject
  /api/v1/logs:
    post:
      consumes:
      - application/json
      description: Stores logs
      parameters:
      - description: LogEvent Data
        in: body
        name: data
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Save log
      tags:
      - Log
  /api/v1/pipelines:
    get:
      consumes:
      - application/json
      description: Get Pipeline for validation by repository id, application url and
        revision
      parameters:
      - description: action [GET_PIPELINE_FOR_VALIDATION/dashboard_data
        in: query
        name: action
        required: true
        type: string
      - description: repository id
        in: query
        name: repositoryId
        required: true
        type: string
      - description: application url
        in: query
        name: url
        required: true
        type: string
      - description: commit id or branch name
        in: query
        name: revision
        required: true
        type: string
      - description: From Data
        in: query
        name: from
        type: string
      - description: To Data
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Pipeline for validation
      tags:
      - Pipeline
    post:
      consumes:
      - application/json
      description: Create Pipeline by repository id, application url
      parameters:
      - description: pipeline
        in: body
        name: pipeline
        required: true
        schema:
          type: object
      - description: Repository id
        in: query
        name: repositoryId
        required: true
        type: string
      - description: Url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Create Pipeline
      tags:
      - Pipeline
    put:
      consumes:
      - application/json
      description: Update Pipeline by repository id, application url
      parameters:
      - description: pipeline
        in: body
        name: pipeline
        required: true
        schema:
          type: object
      - description: Repository id
        in: query
        name: repositoryId
        required: true
        type: string
      - description: Url
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Update Pipeline
      tags:
      - Pipeline
  /api/v1/pipelines/{processId}:
    get:
      description: Gets Pipeline or logs by pipeline processId [If action is "get_pipeline",
        then pipeline will be returned or logs will be returned. Available if local
        storage is enabled]
      parameters:
      - description: Pipeline ProcessId
        in: path
        name: id
        required: true
        type: string
      - description: action
        in: query
        name: action
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.ResponseDTO'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
      summary: Get Pipeline or logs [available if local storage is enabled]
      tags:
      - Pipeline
  /api/v1/pipelines/ws:
    get:
      description: Get events by process id
      parameters:
      - description: company_id
        in: query
        name: processId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get events by process id
      tags:
      - Pipeline
  /api/v1/process_life_cycle_events:
    get:
      description: Pulls auto trigger enabled steps
      parameters:
      - description: Agen name
        in: query
        name: agent
        required: true
        type: string
      - description: Pull size
        in: query
        name: count
        required: true
        type: integer
      - description: Step type [BUILD, DEPLOY]
        in: query
        name: step_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Pull Steps
      tags:
      - ProcessLifeCycle
    post:
      consumes:
      - application/json
      description: Stores process lifecycle event
      parameters:
      - description: ProcessLifeCycleEventList Data
        in: body
        name: data
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Save process lifecycle event
      tags:
      - ProcessLifeCycle
  /api/v1/processes:
    get:
      description: Get Process List or count process
      parameters:
      - description: Repository Id
        in: query
        name: repositoryId
        type: string
      - description: App Id
        in: query
        name: appId
        type: string
      - description: Commit Id
        in: query
        name: commitId
        type: string
      - description: Commit Id
        in: query
        name: appId
        type: string
      - description: From Date
        in: query
        name: from
        type: string
      - description: To Date
        in: query
        name: to
        type: string
      - description: Operation[countTodaysProcessByCompanyId/countProcessByCompanyIdAndDate]
        in: query
        name: operation
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Process List or count process
      tags:
      - Process
  /api/v1/processes/{processId}:
    get:
      description: Get Process by Id
      parameters:
      - description: ProcessId
        in: path
        name: processId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Process by Id
      tags:
      - Process
  /api/v1/processes/{processId}/steps/{step}/footmarks:
    get:
      description: Get Footmarks By Process Id And Step
      parameters:
      - description: Process Id
        in: path
        name: processId
        required: true
        type: string
      - description: Step
        in: path
        name: step
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get Footmarks By Process Id And Step
      tags:
      - Process
  /api/v1/processes/{processId}/steps/{step}/footmarks/{footmark}/logs:
    get:
      description: Get logs by Footmarks, Process Id And Step
      parameters:
      - description: Process Id
        in: path
        name: processId
        required: true
        type: string
      - description: Step
        in: path
        name: step
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      - description: Loads Repositories
        in: query
        name: loadRepositories
        type: boolean
      - description: Loads Applications
        in: query
        name: loadApplications
        type: boolean
      - description: Footmark
        in: path
        name: footmark
        required: true
        type: string
      - description: Claims
        in: query
        name: claims
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get logs by Footmarks, Process Id And Step
      tags:
      - Process
  /api/v1/processes_events:
    post:
      consumes:
      - application/json
      description: Stores Pipeline process event
      parameters:
      - description: PipelineProcessEvent Data
        in: body
        name: data
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Save Pipeline process event
      tags:
      - ProcessEvent
  /api/v1/repositories/{id}:
    get:
      description: Get repository by repository id
      parameters:
      - description: repository id
        in: path
        name: id
        required: true
        type: string
      - description: Load applications
        in: query
        name: loadApplications
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get repository by repository id
      tags:
      - Repository
  /api/v1/repositories/{id}/applications:
    get:
      description: Get applications by repository id
      parameters:
      - description: repository id
        in: path
        name: id
        required: true
        type: string
      - description: status
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Record count
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResponseDTO'
      summary: Get applications by repository id
      tags:
      - Repository
swagger: "2.0"
